{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>The SparkFun MY1690 MP3 Decoder Arduino library includes three examples to demonstrate how to use the library. Let's take a closer look at these examples.</p>"},{"location":"arduino_examples/#example-1-play-file","title":"Example 1 - Play File","text":"<p>The first example plays the first audio track stored on a connected SD card once through and stops. In Arduino, open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example1_PlayFile. Select the Board and Port and click \"Upload\". Once upload finishes, the code will automatically start by playing the first track stored on the SD card so make sure to have headphones/speakers connected to hear the audio as it does not repeat. You can push the Reset button on the shield to reset the board and start the code over to hear the track play again.</p> <p>The code does have some serial printouts to help troubleshoot if the code hangs on attempting to initialize the MY1690X or when checking the SD card for audio tracks. If you have any issues with playback, open the serial monitor with the baud set to 115200 to view the serial prints from the code.</p>"},{"location":"arduino_examples/#example-2-kitchen-sink","title":"Example 2 - Kitchen Sink","text":"<p>The second example demonstrates how to use all of the available commands on the MY1690X to control and manipulate audio tracks through a serial menu. Open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example2_KitchenSink. Select the Board and Port and click \"Upload\". After the code finishes uploading, open the serial monitor with the baud set to 115200 and you should see a menu like the screenshot below:</p> <p></p> <p>The MY1690 Menu has options for all the available playback and settings commands for the MY1690X. Some like \"Play\" or \"Reverse\" are straightforward and perform the expected action. The options for setting the equalizer (Set EQ) and play mode (Set Play Mode) cycle through the available options for these settings and print out the matching number. The Equalizer and Play modes are listed below and can be found in the instruction list in section 6.1 of the MY1690X datasheet:</p> <p>Equalizer Modes</p> <ul> <li>0 - None</li> <li>1 - Pop</li> <li>2 - Rock</li> <li>3 - Jazz</li> <li>4 - Classic</li> <li>5 - Bass</li> </ul> <p>Play Modes</p> <ul> <li>0 - Full</li> <li>1 - Folder</li> <li>2 - Single</li> <li>3 - Random</li> <li>4 - No Loop</li> </ul>"},{"location":"arduino_examples/#example-3-kitchen-sink-esp32","title":"Example 3 - Kitchen Sink ESP32","text":"<p>Example 3 - Kitchen Sink ESP32 is nearly identical to Example 2 but is modified to work with ESP32-based development boards like the SparkFun IoT RedBoard - ESP32. Open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example2_KitchenSink. Select the Board (SparkFun IoT RedBoard - ESP32 or other ESP32 dev board) and Port and click \"Upload\". After the code finishes uploading, open the serial monitor with the baud set to 115200 to view the same serial menu as pictured above.</p>"},{"location":"arduino_setup/","title":"Arduino Library Setup","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"arduino_setup/#installing-the-sparkfun-my1690x-mp3-decoder-arduino-library","title":"Installing the SparkFun MY1690X MP3 Decoder Arduino Library","text":"<p>The SparkFun MY1690X MP3 Decoder Arduino Library parses the MY1690X's full command set into a user-friendly menu controlled using a serial terminal. Install the library using the Arduino Library Manager tool by searching for \"SparkFun MY1690X\" and install the latest version. If you'd prefer to manually install the library, you can download it from the GitHub Repository or you can download a ZIP of the repository here.</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Start by soldering your preferred connector or wire to the to the power and serial pins (GND, VIN, RX and TX) on the Audio Player Breakout. We opted to just solder male headers to all the pins to plug it into a breadboard for easy prototyping like the photo below:</p> <p></p> <p>Next, make the following connections to your Arduino development board:</p> Audio Player Arduino Ground Ground VIN 5V RX D9 TX D8 <p></p> <p>Now that your Audio Player Breakout is wired up to your Arduino, let's move on to formatting and adding the audio tracks we'll be playing using the Arduino library.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the SparkFun Audio Player Breakout - MY1690X and the hardware present on the board. The photo below highlights the major components on this shield that we'll cover in more detail in this section:</p> <p> </p>"},{"location":"hardware_overview/#my1690x-mp3-decoder-ic","title":"MY1690X MP3 Decoder IC","text":"<p>The MY1690X is an MP3 decoder IC that works with both MP3 and WAV audio files stored on a connected \u00b5SD card. The MY1690X can function both as a removable USB drive when connected over USB to load, view or edit files on the SD card. The IC operates over a serial-UART interface at 3.3V TTL using a command set to control audio playback (Play, Pause, Next, etc.), volume and equalizer settings and query statuses (SD card contents, track name/length, etc.). It supports audio files with sampling rates between 8 and 48k with bit rates between 8 and 320Kbps.</p>"},{"location":"hardware_overview/#connectors","title":"Connectors","text":"<p>The Audio Player Breakout - MY1690X has a pair of connectors on the board. A USB-C connector and 3.5mm TRRS connector.</p>"},{"location":"hardware_overview/#usb-c","title":"USB-C","text":"<p>The USB-C connector on the board connects directly to the MY1690X to mount it as a removable USB drive when a microSD card is inserted and the board is plugged into a computer. This allows you to directly add and remove audio files to a connected microSD card. This works great for small audio files but in our testing we found the transfer speed is quite slow and can take several minutes to upload larger audio files. We recommend uploading large files using a USB SD card reader or directly connecting your SD card to your computer.</p> <p>When connected over USB-C (and with a microSD card plugged in) the MY1690X will stay in USB drive \"mode\" until a power cycle. The MY1690X does not have a Reset line so either unplug the board or press the RESET button on the shield to cycle power.</p>"},{"location":"hardware_overview/#audio-output","title":"Audio Output","text":"<p>The shield routes the audio output from the MY1690X to a 3.5MM TRRS audio connector as well as three 0.1\"-spaced through hole pins. This allows you to easily plug in a pair of headphones directly to the shield or solder an alternate audio output. Note, the MY1690X can easily output audio for small headphones but you'll need an external amplifier on the audio output to drive larger speakers.</p>"},{"location":"hardware_overview/#microsd-card-slot","title":"MicroSD Card Slot","text":"<p>The audio player breakout's microSD card slot works with most standard SD cards that have up to 32GB storage space and formatted to FAT16 or FAT32. The MY1690X requires specific naming of files and folders stored on the card. Read on to the MicroSD Card Setup section of this guide for detailed information on naming conventions.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The Audio Player Breakout has two primary ways for powering during normal (not USB drive) operation through the VIN and VUSB PTHs. Both of these pins are netted with VCC for the MY1690X and 3.4 and 5V. The VUSB pin is also tied to the USB-C connector so it can be used either as a 5V power output with USB-C connector or as a power input while USB-C is not connected.</p> <p>The USB-C connector can provide power to the board but the MY1690X defaults to operate as a removable drive when it detects a connection to the D+/- pins USB signals. </p>"},{"location":"hardware_overview/#pinout","title":"Pinout","text":"<p>The board breaks out the MY1690X's serial-UART pins (TX and RX), SD card detect, busy signal and power pins (VIN and GND) on one side and the audio output (Left, Right and Ground) on the opposite side. It also includes pins for VUSB and Ground next to the USB-C connector. The MY1690X communicates at 3.3V but the board has built-in level shifting to work with 5V logic boards.  </p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board has a pair of LEDs labeled PWR and BUSY. The red Power LED indicates when the board has power. The green Busy LED indicates when the MY1690X is busy playing audio.</p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The Audio Player Breakout has three solder jumpers labeled BUSY, PWR and SLV. The BUSY and PWR solder jumpers complete the circuit for their respective LEDs and are CLOSED by default. Open them to disable these LEDs. The SLV jumper connects the sleeve pin of the TRRS connector to ground and is CLOSED by default. Open this jumper to free up the sleeve of the TRRS connector/cable. Most headphones with built-in mics send the MIC signal on the sleeve of their TRRS connector.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The Audio Player Breakout measures 1\" x 1\" (25.4mm x 25.4mm) with three mounting holes that fit a 4-40 screw.</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Audio Player Breakout - MY1690X is a compact audio player built around the MY1690X audio decoder IC. The MY1691X supports both .WAV and .MP3 audio files stored on a connected microSD card with up to 32GB capacity and formatted to FAT16 or FAT32. The MY1690X communicates over serial UART with a simple command set </p> <p>You'll need the following items to follow along with this tutorial:</p> <ul> <li>SparkFun Audio Player Breakout - MY1690X</li> <li>SparkFun RedBoard Plus or other development board</li> <li>Male Breakaway Headers or other header type</li> <li>USB-C Cable</li> </ul> <p>This breakout does require soldering to work properly so you'll need a soldering iron and soldering accessories to assemble it into an Arduino circuit.</p>"},{"location":"introduction/#topics-covered","title":"Topics Covered","text":"<p>This document contains three main sections: Quickstart Guide, Hardware and Software. </p> <p>The Quickstart Guide assumes a working knowledge of how to assemble and use breakout boards with an Arduino development board along with the required software to program them for your project's needs. It covers a quick assembly and then jumps right into getting the necessary software packages installed to start uploading code in just a few short minutes.</p> <p>The Hardware pages cover a hardware overview that provides a detailed overview of the Audio Player Breakout - MY1690X covering all the major components on the board in detail as well as a hardware assembly page which goes over the steps required to assemble and use the Audio Player Breakout with an Arudino board.</p> <p>The Software pages give instructions on installing the SparkFun MY1690 MP3 Decoder Arduino and using the examples included in it.</p>"},{"location":"introduction/#resources-and-documentation","title":"Resources and Documentation","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links in the Resources. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"microsd/","title":"Setup MicroSD Card","text":"<p>The MY1690X works with standard microSD cards up to 32GB capacity and formatted to either FAT16 or FAT32.</p>"},{"location":"microsd/#format-sd-card","title":"Format \u00b5SD Card","text":"<p>If you're using a brand new SD card, you may not need to format it though it may come with pre-installed files that could cause performance issues. The Quick Format option in Windows is the usually the simplest method to properly format the \u00b5SD card. Otherwise there are many free software options for formatting SD cards available online.</p>"},{"location":"microsd/#upload-audio-files","title":"Upload Audio Files","text":"<p>The MY1690X supports both .MP3 and .WAV audio files and acts as a removable USB drive while plugged in over USB-C to directly add audio files to a connected \u00b5SD card. In our testing, we found the MY1690X transfer speed is somewhat limited and can take several minutes to upload larger files. If you're moving a large number or large files to use on the Serial MP3 Shield you may want to use a USB SD card reader or plug your SD card into the matching slot on your computer. </p>"},{"location":"microsd/#file-folder-naming","title":"File &amp; Folder Naming","text":"<p>The MY1690X requires specific naming conventions for files and folders stored on the SD card. Audio files stored in the root directory must begin with a four digit number (000#) starting at 0001 and can have characters following the numbers. Folders should be named with two digits at the start (0#) and then can have descriptive characters following the numbers. Files stored in these folders must be named starting with three digits (00#) and can have characters after the numbers. Refer to section 6.3 in the datasheet for more information on naming requirements.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>In this Quick Start guide we'll connect the SparkFun Audio Player Breakout - MY1690X to a SparkFun RedBoard Plus and use the SparkFun MY1690X MP3 Decoder Arduino Library to play audio stored on a connected microSD card. </p> <p>If you're not familiar with using breakout and development boards or the Arduino IDE, refer to the Hardware &amp; Software sections for a detailed overview of the board along with instructions on soldering to and connecting the breakout, installing and using the SparkFun MY1690X MP3 Decoder Arduino Library.</p>"},{"location":"quickstart/#basic-assembly","title":"Basic Assembly","text":"<p>Start by soldering your preferred connector or wire to the to the power and serial pins (GND, VIN, RX and TX) on the Audio Player Breakout. We opted to just solder to all the pins to plug it into a breadboard for easy prototyping like the photo below:</p> <p></p> <p>Next, make the following connections to your Arduino development board:</p> Audio Player Arduino Ground Ground VIN 5V RX D9 TX D8 <p></p> <p>With everything wired up we can move on to preparing the SD card and uploading the example code.</p>"},{"location":"quickstart/#prepare-sd-card","title":"Prepare SD Card","text":"<p>The MY1690X works with standard SD cards up to 32GB capacity and formatted to either FAT16 or FAT32. Users can upload files to an SD card mounted on the shield by plugging it into a computer over USB-C or can load them directly onto the SD card using a USB Card Reader or the SD card slot on their computer. Files and folders on a connected SD card should match the following naming conventions:</p> <ul> <li>.MP3/.WAV files in the root directory must begin with a four digit number (eg. 000#) starting at 0001 and can have characters following the numbers</li> <li>Folders should begin with a two digit number (eg. 0#) starting at 01 and can have characters following the numbers.</li> <li>.MP3/.WAV files stored inside folders must begin with three digits (eg. 00#) starting at 001 and can have characters following the numbers.</li> </ul> <p>Make sure to load the audio tracks onto the SD card, insert the card into the microSD card slot and then proceed to the Arduino Example.</p>"},{"location":"quickstart/#arduino-example","title":"Arduino Example","text":"<p>With the audio player breakout connected to your development board, let's upload Example 2 - Kitchen Sink to the board to start playing and controlling audio. This example will start playing the first track once it's uploaded and also includes a serial menu to access all of the UART commands using simple text commands. Follow the steps below to upload the example.</p> <ul> <li>Open the Arduino IDE.</li> <li>Open the Library Manager tool, search for \"SparkFun MY1690X MP3 Decoder\" and install the latest version </li> <li>Open \"Example 2 - Kitchen Sink\".</li> <li>Select your Board (SparkFun RedBoard or other board) and Port and click \"Upload\".</li> <li>After the code compiles and finishes uploading, open the serial monitor with the baud set to 115200.</li> <li>The code prints out a menu of available commands to control the MY1690X's playback. Type in the command you'd like to do and hit Enter or click Send.</li> <li>Have fun playing around controlling track playback, volume and other features.</li> </ul> <p></p>"},{"location":"quickstart/#code-to-note","title":"Code to Note","text":"<ul> <li> <p>Serial Setup <pre><code>#include \"SoftwareSerial.h\"\nSoftwareSerial serialMP3(8, 9); //RX on Arduino connected to TX on MY1690's, TX on Arduino connected to the MY1690's RX pin\n\n//For boards that have multiple hardware serial ports\n//HardwareSerial serialMP3(2); //Create serial port on ESP32: TX on 17, RX on 16\n</code></pre> The code has options for both Software Serial and Hardware Serial depending on your dev board. The code defaults to use pins D8 and D9 for software serial</p> </li> <li> <p>MY1690X &amp; Track Checks</p> </li> </ul> <p><pre><code>if (myMP3.begin(serialMP3) == false) // Beginning the MP3 player requires a serial port (either hardware or software)\n  {\n    Serial.println(F(\"Device not detected. Check wiring. Freezing.\"));\n    while (1);\n  }\n\n  int songCount = myMP3.getSongCount();\n  if (songCount == 0)\n  {\n    Serial.println(F(\"Oh no! No songs found. Make sure the SD card is inserted and there are MP3s on it. Freezing.\"));\n    while (1);\n  }\n</code></pre> On setup, the code checks to detect the MY1690X over serial and also checks to make sure the SD card has audio tracks </p> <ul> <li>Get Track Numbers, MY1690 Version and Play First Track <pre><code>  Serial.print(F(\"Number of tracks on SD card: \"));\n  Serial.println(songCount);\n\n  Serial.print(F(\"MY1690 Version: \"));\n  Serial.println(myMP3.getVersion());\n\n  myMP3.play(); //Will play the lowest numbered song in the folder\n</code></pre></li> </ul> <p>The example will print out the number of tracks detected on the SD card, the MY1690 version and then will play the lowest numbered song on the card. Note, it takes ~30ms for a track to start playing so the code waits 50ms before requesting play status.</p> <ul> <li>MY1690X Menu Options</li> </ul> <p>This menu shows the available commands to control playback. Type in the matching character in the serial monitor and hit Enter to send it. The Set EQ and Set play mode commands cycle through the available equalizer and play mode options. Refer to the Arduino Examples section of this guide or section 6.1 of the datasheet for more information.</p> <pre><code>void mainMenu()\n{\n  Serial.println();\n  Serial.println(F(\"SparkFun MY1690 Menu:\"));\n\n  Serial.println(F(\"s) Stop play\"));\n  Serial.println(F(\"x) Reset IC\"));\n  Serial.println(F(\"a) Volume up\"));\n  Serial.println(F(\"z) Volume down\"));\n  Serial.println(F(\"f) Fast forward\"));\n  Serial.println(F(\"r) Reverse\"));\n  Serial.println(F(\"p) Play/Pause toggle\"));\n  Serial.println(F(\"e) Set EQ\"));\n  Serial.println(F(\"m) Set play mode\"));\n  Serial.println(F(\"&lt;) Play previous\"));\n  Serial.println(F(\"&gt;) Play next\"));\n  Serial.println(F(\"#) Play track number\"));\n  Serial.println(F(\"c) Current track number\"));\n  Serial.println(F(\"t) Track elapsed time\"));\n  Serial.println(F(\"T) Track total time\"));\n  Serial.println(F(\"Enter command:\"));\n}\n</code></pre>"},{"location":"resources/","title":"Resources","text":"<p>Refer to the following items for more information about the SparkFun Audio Player Breakout - MY1690X:</p> <ul> <li>Schematic</li> <li>KiCad Files</li> <li>Board Dimensions</li> <li>Datasheet - MY1690X</li> <li>SparkFun MY1690X MP3 Decoder Arduino Library</li> <li>GitHub Repository</li> </ul>"},{"location":"singlepage/","title":"Introduction","text":"<p>The SparkFun Audio Player Breakout - MY1690X is a compact audio player built around the MY1690X audio decoder IC. The MY1691X supports both .WAV and .MP3 audio files stored on a connected microSD card with up to 32GB capacity and formatted to FAT16 or FAT32. The MY1690X communicates over serial UART with a simple command set </p> <p>You'll need the following items to follow along with this tutorial:</p> <ul> <li>SparkFun Audio Player Breakout - MY1690X</li> <li>SparkFun RedBoard Plus or other development board</li> <li>Male Breakaway Headers or other header type</li> <li>USB-C Cable</li> </ul> <p>This breakout does require soldering to work properly so you'll need a soldering iron and soldering accessories to assemble it into an Arduino circuit.</p>"},{"location":"singlepage/#topics-covered","title":"Topics Covered","text":"<p>This document contains three main sections: Quickstart Guide, Hardware and Software. </p> <p>The Quickstart Guide assumes a working knowledge of how to assemble and use breakout boards with an Arduino development board along with the required software to program them for your project's needs. It covers a quick assembly and then jumps right into getting the necessary software packages installed to start uploading code in just a few short minutes.</p> <p>The Hardware pages cover a hardware overview that provides a detailed overview of the Audio Player Breakout - MY1690X covering all the major components on the board in detail as well as a hardware assembly page which goes over the steps required to assemble and use the Audio Player Breakout with an Arudino board.</p> <p>The Software pages give instructions on installing the SparkFun MY1690 MP3 Decoder Arduino and using the examples included in it.</p>"},{"location":"singlepage/#resources-and-documentation","title":"Resources and Documentation","text":"<p>You'll find the board design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links in the Resources. Lastly, the Support section includes a Troubleshooting page that includes any helpful tips specific to this board as well as information on how to receive technical support from SparkFun.</p>"},{"location":"singlepage/#quickstart-guide","title":"Quickstart Guide","text":"<p>In this Quick Start guide we'll connect the SparkFun Audio Player Breakout - MY1690X to a SparkFun RedBoard Plus and use the SparkFun MY1690X MP3 Decoder Arduino Library to play audio stored on a connected microSD card. </p> <p>If you're not familiar with using breakout and development boards or the Arduino IDE, refer to the Hardware &amp; Software sections for a detailed overview of the board along with instructions on soldering to and connecting the breakout, installing and using the SparkFun MY1690X MP3 Decoder Arduino Library.</p>"},{"location":"singlepage/#basic-assembly","title":"Basic Assembly","text":"<p>Start by soldering your preferred connector or wire to the to the power and serial pins (GND, VIN, RX and TX) on the Audio Player Breakout. We opted to just solder to all the pins to plug it into a breadboard for easy prototyping like the photo below:</p> <p></p> <p>Next, make the following connections to your Arduino development board:</p> Audio Player Arduino Ground Ground VIN 5V RX D9 TX D8 <p></p> <p>With everything wired up we can move on to preparing the SD card and uploading the example code.</p>"},{"location":"singlepage/#prepare-sd-card","title":"Prepare SD Card","text":"<p>The MY1690X works with standard SD cards up to 32GB capacity and formatted to either FAT16 or FAT32. Users can upload files to an SD card mounted on the shield by plugging it into a computer over USB-C or can load them directly onto the SD card using a USB Card Reader or the SD card slot on their computer. Files and folders on a connected SD card should match the following naming conventions:</p> <ul> <li>.MP3/.WAV files in the root directory must begin with a four digit number (eg. 000#) starting at 0001 and can have characters following the numbers</li> <li>Folders should begin with a two digit number (eg. 0#) starting at 01 and can have characters following the numbers.</li> <li>.MP3/.WAV files stored inside folders must begin with three digits (eg. 00#) starting at 001 and can have characters following the numbers.</li> </ul> <p>Make sure to load the audio tracks onto the SD card, insert the card into the microSD card slot and then proceed to the Arduino Example.</p>"},{"location":"singlepage/#arduino-example","title":"Arduino Example","text":"<p>With the audio player breakout connected to your development board, let's upload Example 2 - Kitchen Sink to the board to start playing and controlling audio. This example will start playing the first track once it's uploaded and also includes a serial menu to access all of the UART commands using simple text commands. Follow the steps below to upload the example.</p> <ul> <li>Open the Arduino IDE.</li> <li>Open the Library Manager tool, search for \"SparkFun MY1690X MP3 Decoder\" and install the latest version </li> <li>Open \"Example 2 - Kitchen Sink\".</li> <li>Select your Board (SparkFun RedBoard or other board) and Port and click \"Upload\".</li> <li>After the code compiles and finishes uploading, open the serial monitor with the baud set to 115200.</li> <li>The code prints out a menu of available commands to control the MY1690X's playback. Type in the command you'd like to do and hit Enter or click Send.</li> <li>Have fun playing around controlling track playback, volume and other features.</li> </ul> <p></p>"},{"location":"singlepage/#code-to-note","title":"Code to Note","text":"<ul> <li> <p>Serial Setup <pre><code>#include \"SoftwareSerial.h\"\nSoftwareSerial serialMP3(8, 9); //RX on Arduino connected to TX on MY1690's, TX on Arduino connected to the MY1690's RX pin\n\n//For boards that have multiple hardware serial ports\n//HardwareSerial serialMP3(2); //Create serial port on ESP32: TX on 17, RX on 16\n</code></pre> The code has options for both Software Serial and Hardware Serial depending on your dev board. The code defaults to use pins D8 and D9 for software serial</p> </li> <li> <p>MY1690X &amp; Track Checks</p> </li> </ul> <p><pre><code>if (myMP3.begin(serialMP3) == false) // Beginning the MP3 player requires a serial port (either hardware or software)\n  {\n    Serial.println(F(\"Device not detected. Check wiring. Freezing.\"));\n    while (1);\n  }\n\n  int songCount = myMP3.getSongCount();\n  if (songCount == 0)\n  {\n    Serial.println(F(\"Oh no! No songs found. Make sure the SD card is inserted and there are MP3s on it. Freezing.\"));\n    while (1);\n  }\n</code></pre> On setup, the code checks to detect the MY1690X over serial and also checks to make sure the SD card has audio tracks </p> <ul> <li>Get Track Numbers, MY1690 Version and Play First Track <pre><code>  Serial.print(F(\"Number of tracks on SD card: \"));\n  Serial.println(songCount);\n\n  Serial.print(F(\"MY1690 Version: \"));\n  Serial.println(myMP3.getVersion());\n\n  myMP3.play(); //Will play the lowest numbered song in the folder\n</code></pre></li> </ul> <p>The example will print out the number of tracks detected on the SD card, the MY1690 version and then will play the lowest numbered song on the card. Note, it takes ~30ms for a track to start playing so the code waits 50ms before requesting play status.</p> <ul> <li>MY1690X Menu Options</li> </ul> <p>This menu shows the available commands to control playback. Type in the matching character in the serial monitor and hit Enter to send it. The Set EQ and Set play mode commands cycle through the available equalizer and play mode options. Refer to the Arduino Examples section of this guide or section 6.1 of the datasheet for more information.</p> <pre><code>void mainMenu()\n{\n  Serial.println();\n  Serial.println(F(\"SparkFun MY1690 Menu:\"));\n\n  Serial.println(F(\"s) Stop play\"));\n  Serial.println(F(\"x) Reset IC\"));\n  Serial.println(F(\"a) Volume up\"));\n  Serial.println(F(\"z) Volume down\"));\n  Serial.println(F(\"f) Fast forward\"));\n  Serial.println(F(\"r) Reverse\"));\n  Serial.println(F(\"p) Play/Pause toggle\"));\n  Serial.println(F(\"e) Set EQ\"));\n  Serial.println(F(\"m) Set play mode\"));\n  Serial.println(F(\"&lt;) Play previous\"));\n  Serial.println(F(\"&gt;) Play next\"));\n  Serial.println(F(\"#) Play track number\"));\n  Serial.println(F(\"c) Current track number\"));\n  Serial.println(F(\"t) Track elapsed time\"));\n  Serial.println(F(\"T) Track total time\"));\n  Serial.println(F(\"Enter command:\"));\n}\n</code></pre>"},{"location":"singlepage/#hardware-overview","title":"Hardware Overview","text":"<p>Let's take a closer look at the SparkFun Audio Player Breakout - MY1690X and the hardware present on the board. The photo below highlights the major components on this shield that we'll cover in more detail in this section:</p> <p> </p>"},{"location":"singlepage/#my1690x-mp3-decoder-ic","title":"MY1690X MP3 Decoder IC","text":"<p>The MY1690X is an MP3 decoder IC that works with both MP3 and WAV audio files stored on a connected \u00b5SD card. The MY1690X can function both as a removable USB drive when connected over USB to load, view or edit files on the SD card. The IC operates over a serial-UART interface at 3.3V TTL using a command set to control audio playback (Play, Pause, Next, etc.), volume and equalizer settings and query statuses (SD card contents, track name/length, etc.). It supports audio files with sampling rates between 8 and 48k with bit rates between 8 and 320Kbps.</p>"},{"location":"singlepage/#connectors","title":"Connectors","text":"<p>The Audio Player Breakout - MY1690X has a pair of connectors on the board. A USB-C connector and 3.5mm TRRS connector.</p>"},{"location":"singlepage/#usb-c","title":"USB-C","text":"<p>The USB-C connector on the board connects directly to the MY1690X to mount it as a removable USB drive when a microSD card is inserted and the board is plugged into a computer. This allows you to directly add and remove audio files to a connected microSD card. This works great for small audio files but in our testing we found the transfer speed is quite slow and can take several minutes to upload larger audio files. We recommend uploading large files using a USB SD card reader or directly connecting your SD card to your computer.</p> <p>When connected over USB-C (and with a microSD card plugged in) the MY1690X will stay in USB drive \"mode\" until a power cycle. The MY1690X does not have a Reset line so either unplug the board or press the RESET button on the shield to cycle power.</p>"},{"location":"singlepage/#audio-output","title":"Audio Output","text":"<p>The shield routes the audio output from the MY1690X to a 3.5MM TRRS audio connector as well as three 0.1\"-spaced through hole pins. This allows you to easily plug in a pair of headphones directly to the shield or solder an alternate audio output. Note, the MY1690X can easily output audio for small headphones but you'll need an external amplifier on the audio output to drive larger speakers.</p>"},{"location":"singlepage/#microsd-card-slot","title":"MicroSD Card Slot","text":"<p>The audio player breakout's microSD card slot works with most standard SD cards that have up to 32GB storage space and formatted to FAT16 or FAT32. The MY1690X requires specific naming of files and folders stored on the card. Read on to the MicroSD Card Setup section of this guide for detailed information on naming conventions.</p>"},{"location":"singlepage/#power","title":"Power","text":"<p>The Audio Player Breakout has two primary ways for powering during normal (not USB drive) operation through the VIN and VUSB PTHs. Both of these pins are netted with VCC for the MY1690X and 3.4 and 5V. The VUSB pin is also tied to the USB-C connector so it can be used either as a 5V power output with USB-C connector or as a power input while USB-C is not connected.</p> <p>The USB-C connector can provide power to the board but the MY1690X defaults to operate as a removable drive when it detects a connection to the D+/- pins USB signals. </p>"},{"location":"singlepage/#pinout","title":"Pinout","text":"<p>The board breaks out the MY1690X's serial-UART pins (TX and RX), SD card detect, busy signal and power pins (VIN and GND) on one side and the audio output (Left, Right and Ground) on the opposite side. It also includes pins for VUSB and Ground next to the USB-C connector. The MY1690X communicates at 3.3V but the board has built-in level shifting to work with 5V logic boards.  </p>"},{"location":"singlepage/#leds","title":"LEDs","text":"<p>The board has a pair of LEDs labeled PWR and BUSY. The red Power LED indicates when the board has power. The green Busy LED indicates when the MY1690X is busy playing audio.</p>"},{"location":"singlepage/#solder-jumpers","title":"Solder Jumpers","text":"<p>The Audio Player Breakout has three solder jumpers labeled BUSY, PWR and SLV. The BUSY and PWR solder jumpers complete the circuit for their respective LEDs and are CLOSED by default. Open them to disable these LEDs. The SLV jumper connects the sleeve pin of the TRRS connector to ground and is CLOSED by default. Open this jumper to free up the sleeve of the TRRS connector/cable. Most headphones with built-in mics send the MIC signal on the sleeve of their TRRS connector.</p>"},{"location":"singlepage/#board-dimensions","title":"Board Dimensions","text":"<p>The Audio Player Breakout measures 1\" x 1\" (25.4mm x 25.4mm) with three mounting holes that fit a 4-40 screw.</p> <p> </p>"},{"location":"singlepage/#hardware-hookup","title":"Hardware Hookup","text":"<p>Start by soldering your preferred connector or wire to the to the power and serial pins (GND, VIN, RX and TX) on the Audio Player Breakout. We opted to just solder male headers to all the pins to plug it into a breadboard for easy prototyping like the photo below:</p> <p></p> <p>Next, make the following connections to your Arduino development board:</p> Audio Player Arduino Ground Ground VIN 5V RX D9 TX D8 <p></p> <p>Now that your Audio Player Breakout is wired up to your Arduino, let's move on to formatting and adding the audio tracks we'll be playing using the Arduino library.</p>"},{"location":"singlepage/#microsd-card-setup","title":"MicroSD Card Setup","text":"<p>--8&lt;-- \"./docs/microsd.md</p>"},{"location":"singlepage/#setting-up-arduino","title":"Setting Up Arduino","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"singlepage/#installing-the-sparkfun-my1690x-mp3-decoder-arduino-library","title":"Installing the SparkFun MY1690X MP3 Decoder Arduino Library","text":"<p>The SparkFun MY1690X MP3 Decoder Arduino Library parses the MY1690X's full command set into a user-friendly menu controlled using a serial terminal. Install the library using the Arduino Library Manager tool by searching for \"SparkFun MY1690X\" and install the latest version. If you'd prefer to manually install the library, you can download it from the GitHub Repository or you can download a ZIP of the repository here.</p>"},{"location":"singlepage/#arduino-examples","title":"Arduino Examples","text":"<p>The SparkFun MY1690 MP3 Decoder Arduino library includes three examples to demonstrate how to use the library. Let's take a closer look at these examples.</p>"},{"location":"singlepage/#example-1-play-file","title":"Example 1 - Play File","text":"<p>The first example plays the first audio track stored on a connected SD card once through and stops. In Arduino, open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example1_PlayFile. Select the Board and Port and click \"Upload\". Once upload finishes, the code will automatically start by playing the first track stored on the SD card so make sure to have headphones/speakers connected to hear the audio as it does not repeat. You can push the Reset button on the shield to reset the board and start the code over to hear the track play again.</p> <p>The code does have some serial printouts to help troubleshoot if the code hangs on attempting to initialize the MY1690X or when checking the SD card for audio tracks. If you have any issues with playback, open the serial monitor with the baud set to 115200 to view the serial prints from the code.</p>"},{"location":"singlepage/#example-2-kitchen-sink","title":"Example 2 - Kitchen Sink","text":"<p>The second example demonstrates how to use all of the available commands on the MY1690X to control and manipulate audio tracks through a serial menu. Open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example2_KitchenSink. Select the Board and Port and click \"Upload\". After the code finishes uploading, open the serial monitor with the baud set to 115200 and you should see a menu like the screenshot below:</p> <p></p> <p>The MY1690 Menu has options for all the available playback and settings commands for the MY1690X. Some like \"Play\" or \"Reverse\" are straightforward and perform the expected action. The options for setting the equalizer (Set EQ) and play mode (Set Play Mode) cycle through the available options for these settings and print out the matching number. The Equalizer and Play modes are listed below and can be found in the instruction list in section 6.1 of the MY1690X datasheet:</p> <p>Equalizer Modes</p> <ul> <li>0 - None</li> <li>1 - Pop</li> <li>2 - Rock</li> <li>3 - Jazz</li> <li>4 - Classic</li> <li>5 - Bass</li> </ul> <p>Play Modes</p> <ul> <li>0 - Full</li> <li>1 - Folder</li> <li>2 - Single</li> <li>3 - Random</li> <li>4 - No Loop</li> </ul>"},{"location":"singlepage/#example-3-kitchen-sink-esp32","title":"Example 3 - Kitchen Sink ESP32","text":"<p>Example 3 - Kitchen Sink ESP32 is nearly identical to Example 2 but is modified to work with ESP32-based development boards like the SparkFun IoT RedBoard - ESP32. Open the example by navigating to File &gt; Examples &gt; SparkFun MY1690X MP3 Decoder Arduino Library &gt; Example2_KitchenSink. Select the Board (SparkFun IoT RedBoard - ESP32 or other ESP32 dev board) and Port and click \"Upload\". After the code finishes uploading, open the serial monitor with the baud set to 115200 to view the same serial menu as pictured above.</p>"},{"location":"singlepage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"singlepage/#audio-track-naming","title":"Audio Track Naming","text":"<p>One of the most common issues we expect you to run into will revolve around track naming outlined in the MicroSD Card Setup section of this guide and section 6.3 of the datasheet.Remember that tracks and folders must start at 0001 (Track in root directory), 001 (Track in folder) and 01 (Folder). Any tracks and folders not explicitly following the naming convention will be ignored by the MY1690X.</p>"},{"location":"singlepage/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"singlepage/#resources","title":"Resources","text":"<p>Refer to the following items for more information about the SparkFun Audio Player Breakout - MY1690X:</p> <ul> <li>Schematic</li> <li>KiCad Files</li> <li>Board Dimensions</li> <li>Datasheet - MY1690X</li> <li>SparkFun MY1690X MP3 Decoder Arduino Library</li> <li>GitHub Repository</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#audio-track-naming","title":"Audio Track Naming","text":"<p>One of the most common issues we expect you to run into will revolve around track naming outlined in the MicroSD Card Setup section of this guide and section 6.3 of the datasheet.Remember that tracks and folders must start at 0001 (Track in root directory), 001 (Track in folder) and 01 (Folder). Any tracks and folders not explicitly following the naming convention will be ignored by the MY1690X.</p>"},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun IoT RedBoard repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the  repository."},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the  repository."},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}